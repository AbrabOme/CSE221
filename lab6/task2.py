# -*- coding: utf-8 -*-
"""task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19VFBjSX1xIt48tp7F3yWWtRg2qknqPee
"""

#task2

import heapq
import math

task2_input = open(file='input2_1.txt', mode='r')
task2_output = open(file='output2_1.txt', mode='w')


lst = task2_input.readline().strip().split(" ")

v = int(lst[0])
e = int(lst[1])

adj_list = {}

for i in range(1,v+1):
    adj_list[i] = []

for i in range(e):
    lst2 = task2_input.readline().strip().split()
    u = int(lst2[0])
    v = int(lst2[1])
    w = int(lst2[2])

    adj_list[u].append([v,w])

s = task2_input.readline().strip().split(" ")
alice = int(s[0])
bob = int(s[1])


def Dijkstra(gr, src):
    p = {}
    dist = {}
    Q = []
    visited = []

    for itr in gr:
        p[itr] = None
        dist[itr] = math.inf
        Q.append([math.inf, itr])

    dist[src] = 0
    Q.append([0, src])

    while len(Q)!= 0:
        heapq.heapify(Q)
        check = heapq.heappop(Q)
        dis_u, u = check
        visited.append(u)


        for v in gr[u]:
            if v not in visited:
                alt = dis_u+v[1]
                if alt < dist[v[0]]:
                    dist[v[0]] = alt
                    p[v[0]] = u
                    heapq.heappush(Q,[alt, v[0]])
    return dist

x = Dijkstra(adj_list, alice)
y = Dijkstra(adj_list, bob)

a_lis = []
b_lis = []

for i,j in x.items():
    a_lis.append(j)

for i,j in y.items():
    b_lis.append(j)

node = None
final = math.inf

for i in range(len(a_lis)):
    if a_lis[i] != math.inf and b_lis[i] != math.inf:
        save = max(a_lis[i],b_lis[i])
        if final > save:
            node = i
            final = save

if node != None:
    t = ""
    n = ""
    t += "Time" + " " + str(final)
    n += "Node" + " " + str(node+1)

    task2_output.write(t+"\n")
    task2_output.write(n)

else:
    task2_output.write("Impossible")

task2_input.close()
task2_output.close()